
on: 
 #workflow_dispatch is run on command
 workflow_dispatch:
 #commented for multiple actions examples for the same project
 #pull request will run on a completed pull request on the branch specifid
 #pull_request:
 #   branches:
 #     - master

jobs:
  build:
    #use either windows runners (windows-latest) or Linux (ubuntu-latest)
    #https://docs.github.com/en/enterprise-cloud@latest/actions/using-github-hosted-runners/about-github-hosted-runners
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v1

    - uses: azure/login@v1
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}

    #reading params from a json file (example, a bicep json file)
    - name: reading params from json file
      id: getParams
      run: |
        content=`cat ./synapse.main.params.json`
        # the following lines are only required for multi line json
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        # end of optional handling for multi line json
        echo "::set-output name=packageJson::$content"
    
    #testing output from the previous command
    #- name: echo synapseWorkspaceName
    #  run: echo "${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseWorkspaceName.value}}.sql.azuresynapse.net"
    
    #- name: echo synapseDedicatedSQLPool
    #  run: echo "${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseDedicatedSQLPool.value}}"

    #how to read secrets from an Azure keyvault (or possible to use the Service Principal if added to the database as a contained user)
    #https://docs.microsoft.com/en-us/azure/developer/github/github-key-vault
    - uses: azure/get-keyvault-secrets@v1
      id: getKeyVaultSecrets # ID for secrets that you will reference
      with:
        keyvault: "${{fromJson(steps.getParams.outputs.packageJson).parameters.keyVault.value}}" #name of key vault in Azure portal
        secrets: "${{fromJson(steps.getParams.outputs.packageJson).parameters.keyVaultUserSecret.value}},${{fromJson(steps.getParams.outputs.packageJson).parameters.keyVaultPwdSecret.value}}"  #comma separated list of secret keys to fetch from key vault 

    #build the project
    #dotnet build options: https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-build#options
    - name: dotnet build
      run: dotnet build "./sdksqlproj/sdksqlproj.sqlproj" /p:NetCoreBuild=true
    
    ##sql auth (working)
    ##run the dacpac
    ##/p:ExcludeObjectType=ExternalFileFormats required for external tables, 
    ##the dacpac will try and drop the external file format
    ##which causes an error if it's in use. 
    ##recommend a predeployment script to handle if required
    ##(ie, drop\create the external table)
    ##sqlpackage parameters https://docs.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-publish?view=sql-server-ver15#parameters-for-the-publish-action
    #- name: run sqlpackage
    #  run: sqlpackage 
    #    /Action:Publish
    #    /Properties:DropObjectsNotInSource=False
    #    /Properties:ExcludeObjectType=ExternalFileFormats
    #    /SourceFile:"./sdksqlproj/bin/Debug/sdksqlproj.dacpac"
    #    /TargetDatabaseName:${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseDedicatedSQLPool.value}}
    #    /TargetPassword:${{steps.getKeyVaultSecrets.outputs.bicep-asw-admin-pwd}}
    #    /TargetServerName:"${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseWorkspaceName.value}}.sql.azuresynapse.net,1433"
    #    /TargetUser:${{steps.getKeyVaultSecrets.outputs.bicep-asw-admin-name}}
    ##sql auth (working)

    # or use

    ##aad auth (working)
    #https://github.com/Azure/azure-resource-login-action
    ##sql pool requiements:
    #create user [bicepsqldeployserviceprincipal] from EXTERNAL provider;
    #sp_addrolemember 'db_owner', 'bicepsqldeployserviceprincipal' #some credentials, db_ddladmin, db_datareader, db_datawriter may be enough

    - id: sql-login
      name: aquiring sql access token
      uses: azure/azure-resource-login-action@v1.0.0
      with:
        creds: ${{secrets.AZURE_CREDENTIALS}}
        resource-url: "https://database.windows.net"

    #run the dacpac
    #/p:ExcludeObjectType=ExternalFileFormats required for external tables, 
    #the dacpac will try and drop the external file format
    #which causes an error if it's in use. 
    #recommend a predeployment script to handle if required
    #(ie, drop\create the external table)
    #sqlpackage parameters https://docs.microsoft.com/en-us/sql/tools/sqlpackage/sqlpackage-publish?view=sql-server-ver15#parameters-for-the-publish-action
    - name: run sqlpackage
      run: sqlpackage 
        /Action:Publish
        /AccessToken:${{steps.sql-login.outputs.token}}
        /Properties:DropObjectsNotInSource=False
        /Properties:ExcludeObjectType=ExternalFileFormats
        /SourceFile:"./sdksqlproj/bin/Debug/sdksqlproj.dacpac"
        /TargetDatabaseName:${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseDedicatedSQLPool.value}}
        /TargetServerName:"${{fromJson(steps.getParams.outputs.packageJson).parameters.synapseWorkspaceName.value}}.sql.azuresynapse.net,1433" 
    ##aad auth (working)

    #https://github.com/Azure/login#az-logout-and-security-hardening
    - name: az logout and security hardening
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az logout
          az cache purge
          az account clear
